import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import React, { useEffect, useState } from 'react'
import { FolderBrowserModal } from './FolderBrowserModal'

interface PathSettingsProps {
  appState: any
  folderBrowser: any
}

export function PathSettings({ appState, folderBrowser }: PathSettingsProps) {
  const [browseTarget, setBrowseTarget] = useState<'startFolder' | 'videoMoveTarget' | null>(null)
  
  // Auto-update videoMoveTarget when startFolder changes
  useEffect(() => {
    if (appState.startFolder && appState.startFolder !== ".") {
      // Create a default target folder based on the start folder
      const defaultTarget = appState.startFolder.endsWith('\\') 
        ? `${appState.startFolder}SortedVideos` 
        : `${appState.startFolder}\\SortedVideos`
      
      // Helper function to check if current target is auto-generated from any folder
      const isCurrentTargetAutoGenerated = () => {
        if (!appState.videoMoveTarget) return true
        
        // Check if it's a default pattern
        if (appState.videoMoveTarget === "./SortedVideos" || 
            appState.videoMoveTarget === "SortedVideos") {
          return true
        }
        
        // Check if it ends with \SortedVideos (auto-generated pattern)
        return appState.videoMoveTarget.endsWith('\\SortedVideos')
      }
      
      // Update if target is empty, default, or auto-generated from another folder
      if (isCurrentTargetAutoGenerated() || appState.videoMoveTarget !== defaultTarget) {
        appState.setVideoMoveTarget(defaultTarget)
      }
    }
  }, [appState.startFolder, appState.setVideoMoveTarget])
  
  // Helper function to check if target folder is auto-generated
  const isAutoGeneratedTarget = () => {
    if (!appState.startFolder || appState.startFolder === ".") return false
    
    const expectedTarget = appState.startFolder.endsWith('\\') 
      ? `${appState.startFolder}SortedVideos` 
      : `${appState.startFolder}\\SortedVideos`
    
    return appState.videoMoveTarget === expectedTarget
  }
  
  const handleBrowseClick = (target: 'startFolder' | 'videoMoveTarget') => {
    setBrowseTarget(target)
    folderBrowser.setShowFolderBrowser(true)
  }

  const handleFolderSelect = (folderPath: string) => {
    if (browseTarget === 'startFolder') {
      appState.setStartFolder(folderPath)
    } else if (browseTarget === 'videoMoveTarget') {
      appState.setVideoMoveTarget(folderPath)
    }
    setBrowseTarget(null)
    folderBrowser.setShowFolderBrowser(false)
  }

  const handleModalClose = () => {
    setBrowseTarget(null)
    folderBrowser.setShowFolderBrowser(false)
  }

  // Get the current path for the modal - use start folder as fallback for target
  const getCurrentPath = () => {
    if (browseTarget === 'startFolder') {
      return appState.startFolder
    } else if (browseTarget === 'videoMoveTarget') {
      return appState.videoMoveTarget || appState.startFolder // Use start folder as fallback
    }
    return ''
  }
  return (
    <div className="space-y-4">
      {/* Start Folder */}
      <div className="space-y-2">
        <Label htmlFor="startFolder">Start Folder</Label>
        <div className="flex gap-2">
          <Input
            id="startFolder"
            value={appState.startFolder}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => appState.setStartFolder(e.target.value)}
            placeholder="C:\\Downloads"
            className={appState.validationErrors.startFolder ? 'border-destructive' : ''}
          />
          <Button variant="outline" size="sm" onClick={() => handleBrowseClick('startFolder')}>
            üìÅ Browse
          </Button>
        </div>
        {appState.validationErrors.startFolder && (
          <p className="text-destructive text-sm">{appState.validationErrors.startFolder}</p>
        )}
      </div>

      {/* Video Move Target */}
      <div className="space-y-2">
        <Label htmlFor="videoMoveTarget">
          Video Move Target
          {isAutoGeneratedTarget() && (
            <span className="text-xs text-muted-foreground ml-2">
              (Auto-generated from start folder)
            </span>
          )}
        </Label>
        <div className="flex gap-2">
          <Input
            id="videoMoveTarget"
            value={appState.videoMoveTarget}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => appState.setVideoMoveTarget(e.target.value)}
            placeholder="C:\\Downloads\\LongVideos"
            className={appState.validationErrors.videoMoveTarget ? 'border-destructive' : ''}
          />
          <Button variant="outline" size="sm" onClick={() => handleBrowseClick('videoMoveTarget')}>
            üìÅ Browse
          </Button>
        </div>
        {appState.validationErrors.videoMoveTarget && (
          <p className="text-destructive text-sm">{appState.validationErrors.videoMoveTarget}</p>
        )}
        {isAutoGeneratedTarget() && (
          <p className="text-muted-foreground text-xs">
            üìÅ This folder will be automatically created inside your start folder
          </p>
        )}
      </div>

      {/* Ignore Folders */}
      <div className="space-y-2">
        <Label htmlFor="ignoreFolders">Ignore Folders (comma-separated)</Label>
        <Input
          id="ignoreFolders"
          value={appState.ignoreFolders}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => appState.setIgnoreFolders(e.target.value)}
          placeholder="System Volume Information, $RECYCLE.BIN"
        />
        <p className="text-muted-foreground text-xs">
          Folders to skip during scanning. Use commas to separate multiple folders.
        </p>
      </div>

      {/* Folder Browser Modal */}
      <FolderBrowserModal
        isOpen={folderBrowser.showFolderBrowser}
        onClose={handleModalClose}
        onSelectFolder={handleFolderSelect}
        currentPath={getCurrentPath()}
      />
    </div>
  )
}
